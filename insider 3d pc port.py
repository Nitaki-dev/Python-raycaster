import random, math, keyboard
from kandinsky import fill_rect, draw_string

texture = [[(147, 139, 141), (151, 143, 146), (153, 144, 148), (161, 153, 157), (160, 152, 156), (159, 151, 155), (119, 110, 116), (138, 129, 134), (158, 150, 154), (156, 148, 153), (156, 148, 153), (125, 117, 122), (133, 124, 129), (154, 146, 150), (143, 134, 138), (108, 99, 103)], [(130, 121, 124), (128, 119, 124), (125, 116, 121), (132, 122, 127), (131, 121, 127), (148, 140, 144), (115, 106, 111), (137, 129, 134), (137, 127, 134), (127, 118, 124), (142, 135, 139), (118, 110, 114), (129, 120, 124), (141, 132, 138), (146, 137, 142), (109, 100, 105)], [(125, 116, 120), (123, 114, 119), (120, 110, 117), (116, 106, 114), (112, 103, 111), (127, 118, 124), (107, 98, 103), (130, 122, 127), (131, 123, 128), (129, 122, 128), (137, 130, 136), (112, 104, 109), (116, 106, 111), (132, 123, 127), (134, 125, 130), (107, 98, 104)], [(104, 95, 102), (106, 97, 104), (101, 92, 100), (87, 78, 87), (102, 92, 102), (105, 96, 105), (106, 96, 105), (108, 99, 106), (106, 97, 105), (104, 95, 103), (90, 81, 90), (90, 80, 88), (97, 88, 95), (101, 92, 99), (100, 90, 97), (95, 86, 93)], [(153, 143, 149), (159, 150, 155), (147, 138, 143), (107, 98, 103), (157, 148, 152), (158, 150, 153), (157, 148, 152), (153, 144, 147), (154, 145, 148), (150, 141, 145), (121, 112, 117), (125, 117, 122), (159, 151, 155), (149, 141, 147), (149, 140, 145), (152, 143, 148)], [(132, 122, 129), (128, 118, 125), (140, 131, 136), (106, 97, 103), (141, 131, 136), (146, 137, 140), (150, 141, 144), (151, 142, 145), (149, 140, 143), (141, 132, 135), (115, 105, 109), (124, 116, 121), (147, 137, 143), (137, 127, 134), (132, 122, 128), (146, 137, 141)], [(99, 89, 96), (91, 81, 90), (100, 91, 98), (87, 78, 85), (90, 80, 90), (88, 79, 88), (96, 87, 95), (103, 94, 101), (107, 98, 105), (105, 96, 103), (92, 82, 89), (98, 88, 96), (108, 99, 106), (106, 97, 104), (101, 91, 99), (105, 96, 103)], [(125, 115, 122), (131, 122, 130), (131, 122, 129), (130, 121, 128), (122, 114, 120), (89, 80, 88), (135, 126, 132), (122, 114, 121), (97, 88, 97), (134, 125, 132), (134, 126, 132), (136, 128, 133), (131, 122, 128), (122, 113, 120), (91, 82, 90), (114, 106, 113)], [(145, 136, 140), (144, 135, 140), (136, 127, 133), (150, 141, 146), (153, 144, 147), (93, 84, 90), (133, 124, 129), (119, 109, 114), (110, 100, 107), (155, 145, 149), (144, 135, 138), (153, 144, 147), (146, 137, 140), (143, 134, 139), (106, 96, 102), (143, 134, 138)], [(139, 131, 133), (135, 126, 127), (128, 118, 123), (138, 129, 131), (146, 137, 139), (91, 82, 88), (137, 127, 132), (123, 114, 118), (108, 99, 105), (146, 137, 139), (140, 131, 134), (146, 137, 140), (131, 121, 125), (135, 126, 129), (106, 96, 102), (134, 125, 129)], [(126, 116, 120), (114, 104, 108), (112, 102, 108), (120, 111, 116), (126, 117, 121), (91, 81, 88), (131, 123, 127), (120, 111, 114), (106, 96, 102), (139, 130, 133), (130, 121, 125), (129, 120, 126), (128, 119, 123), (130, 121, 126), (100, 91, 97), (123, 114, 119)], [(91, 81, 89), (115, 107, 113), (112, 103, 112), (111, 101, 111), (111, 102, 110), (102, 92, 100), (92, 83, 91), (109, 100, 107), (110, 101, 108), (99, 90, 98), (86, 77, 86), (103, 94, 103), (104, 95, 103), (106, 97, 105), (108, 99, 107), (107, 97, 105)], [(115, 107, 114), (165, 158, 160), (158, 150, 154), (156, 147, 150), (160, 151, 155), (124, 115, 120), (108, 98, 105), (154, 145, 151), (144, 135, 140), (127, 117, 122), (109, 100, 106), (160, 151, 155), (159, 150, 155), (155, 146, 151), (148, 140, 145), (143, 134, 139)], [(111, 102, 109), (142, 133, 139), (126, 117, 122), (135, 126, 129), (148, 139, 142), (122, 113, 117), (102, 93, 100), (141, 131, 137), (132, 122, 127), (124, 115, 119), (106, 97, 102), (153, 144, 148), (143, 134, 139), (131, 120, 126), (134, 124, 129), (139, 130, 135)], [(110, 101, 108), (130, 120, 126), (110, 101, 108), (128, 118, 123), (139, 129, 132), (120, 111, 114), (110, 100, 107), (142, 132, 136), (139, 130, 132), (128, 119, 122), (111, 102, 108), (150, 141, 145), (132, 122, 125), (126, 115, 120), (127, 117, 121), (134, 125, 129)], [(95, 85, 93), (97, 87, 95), (93, 84, 92), (97, 87, 95), (100, 90, 97), (90, 80, 86), (89, 79, 87), (101, 91, 99), (100, 90, 95), (93, 83, 88), (91, 82, 89), (102, 93, 99), (99, 90, 96), (98, 89, 95), (96, 86, 91), (100, 91, 96)]]

def rand_float(a, b):
    return random.random() * (b - a) + a

size = 15
mapa = [[[rand_float(0, 1) for _ in range(3)] for _ in range(size)] for _ in range(size)]

for i in range(size - 2):
    for j in range(size - 2):
        if rand_float(0, 1) > 0.33:
            mapa[i + 1][j + 1] = 0

posx, posy = (1, random.randint(1, size - 1))
rot = math.pi / 4
x, y = (posx, posy)
mapa[x][y] = 0
count = 0
res = 0.02
scaleX = 4
scaleY = 110

while True:
    testx, testy = (x, y)
    if rand_float(0, 1) > 0.5:
        testx = testx + random.choice([-1, 1])
    else:
        testy = testy + random.choice([-1, 1])

    if 0 < testx < size - 1 and 0 < testy < size - 1:
        if mapa[testx][testy] == 0 or count > 5:
            count = 0
            x, y = (testx, testy)
            mapa[x][y] = 0
            if x == size - 2:
                exitx, exity = (x, y)
                break
        else:
            count = count + 1

fill_rect(0, 0, 322, 222, (0, 0, 0))

texture_height = len(texture)
resolution = 50

while True:  # main game loop
    for i in range(resolution):  # vision loop
        rot_i = rot + math.radians(i * 75 / resolution) - math.pi / 4
        x, y = (posx, posy)
        sin, cos = (res * math.sin(rot_i), res * math.cos(rot_i))
        n = 0
        while True:  # ray loop
            prev_x, prev_y = (x, y)
            x, y = (x + cos, y + sin)
            n = n + 1
            if mapa[int(x)][int(y)] != 0:
                h = min(max(1 / (res * n * math.cos(rot_i - rot)), 0), 1)
                hit = y if cos > 0 else x
                tex_x = hit % 1
                if (cos < 0 and sin > 0) or (cos > 0 and sin < 0):
                    tex_x = 1 - tex_x
                break

        screen_height = int(h * scaleY * 2)
        h1 = int((222 - screen_height) / 2)
        h2 = h1 + screen_height
        for tex_index in range(texture_height):
            tex_y = tex_index / texture_height
            scaled_tex_y = h1 + int(tex_y * screen_height)
            c = texture[tex_index][int(tex_x * len(texture[tex_index]))]
            fill_rect(i * scaleX * 75 // resolution, scaled_tex_y, scaleX * 75 // resolution, texture_height, c)

        fill_rect(i * scaleX * 75 // resolution, 0, scaleX * 75 // resolution, h1, (255,255,255))
        fill_rect(i * scaleX * 75 // resolution, h2, scaleX * 75 // resolution, 222 - h2, (20, 0, 0))

        draw_string("You're at " + str(int(posx)) + "," + str(int(posy)) + ". go to " + str(exitx) + "," + str(exity),0,0, (255,255,255), (0,0,0))

    x, y = (posx, posy)

    if keyboard.is_pressed("up"):
        x, y = (x + 0.3 * math.cos(rot), y + 0.3 * math.sin(rot))
    elif keyboard.is_pressed("down"):
        x, y = (x - 0.3 * math.cos(rot), y - 0.3 * math.sin(rot))
    elif keyboard.is_pressed("left"):
        rot = rot - math.pi / 16
    elif keyboard.is_pressed("right"):
        rot = rot + math.pi / 16
    elif keyboard.is_pressed("esc"):
        break

    if mapa[int(x)][int(y)] == 0:
        if int(posx) == exitx and int(posy) == exity:
            break
        posx, posy = (x, y)
